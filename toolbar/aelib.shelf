<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="aelib_shelf" label="Aelib">
    <memberTool name="blast_to_split"/>
    <memberTool name="ae_HipVersionIncrementer"/>
    <memberTool name="ExtractSelected"/>
    <memberTool name="ExtractEach"/>
    <memberTool name="CombineAll"/>
    <memberTool name="MultiReferenceCopy"/>
    <memberTool name="snapshot_path"/>
    <memberTool name="swap"/>
    <memberTool name="merge"/>
    <memberTool name="wrangle"/>
    <memberTool name="Init_RS"/>
    <memberTool name="CollectProject"/>
  </toolshelf>

  <tool name="blast_to_split" label="Blast to Split" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[for node in hou.selectedNodes():
    if(node.type() == hou.nodeType(hou.sopNodeTypeCategory(), "blast")):
        neg = node.parm("negate").evalAsInt()
        newnode = node.changeNodeType("split", False, True, False, False)
        newnode.parm("negate").set(1-neg)
    ]]></script>
  </tool>

  <tool name="ae_HipVersionIncrementer" label="HIP_Increment" icon="SOP_file">
    <script scriptType="python"><![CDATA[import os, re

def hipIncrementVersion():
    # SETTINGS ==================
    setToFirstFrame = True # Sets playback frame of saved file to first frame (does not affect open file)
    setToManualUpdate = False # Sets update mode of saved file to manual (does not affect open file)
    autoversion = True # If no versioning exists, create a new version
    autoversionzfill = 3 # digit padding for autoversioning
    debug = 0 # print some items to console
    # ===========================

    orighip = hou.hipFile.name()
    hipname = hou.hipFile.basename()
    # hipfile = hipname.split(".")[0]
    # version which works for filenames with periods
    hipfile = os.path.splitext(hipname)[0]
    
    # check current filename for version prefix and split accordingly
    # Uses regex so a filename like myfile_verycool_v001.hip will get picked up correctly (not match the first _v)
    versionSections = ""
    versionType = ""
    if len(re.findall('_v(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_v(?=\d+)', hipfile, 1)        
        versionType = "_v"
    elif len(re.findall('_V(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_V(?=\d+)', hipfile, 1)          
        versionType = "_V"      

    # if no version prefix found, create it
    if versionSections == "":
        if(autoversion):
            versionSections = [hipfile, "0"*autoversionzfill]
            versionType = "_v"
            orighip = orighip.replace(hipfile, hipfile + versionType + "0"*autoversionzfill)
            print "No version found in hip name - Autoversioning"
        else:
            print "No version found in hip name - Exiting"
            return 1

    # regex - match numbers after version splitter. Match until non-numeric value is hit.  
    match = re.match('\d+', versionSections[1])    
    if match:
        versionNumber = match.group(0)
    else:
        print "Problem encountered matching version number - Exiting"
        return 1
    
    # Create new filename
    oldVersion = versionType + versionNumber
    if debug:
        print "Old version: " + oldVersion
    newVersion = versionType + str(int(versionNumber) + 1).zfill(len(versionNumber))
    newhip = orighip.replace(oldVersion, newVersion)
    if debug:    
        print "New file: " + newhip

    # Save the file
    confirm = 0
    if os.path.isfile(newhip) :
        text = "Overwrite existing hip file?"
        confirm = hou.ui.displayMessage(text, buttons=("Yes", "No"), severity=hou.severityType.Message, title="New Hip")
    if confirm == 0 :
        # update mode and frame settings
        updateMode = hou.updateModeSetting()
        frame = hou.frame()
        if (setToManualUpdate):
            hou.setUpdateMode(hou.updateMode.Manual)
        if (setToFirstFrame):
            # hou.setFrame(1)
            hou.setFrame(hou.playbar.playbackRange()[0])

        hou.hipFile.save(newhip)
        
        # reset update mode and frame
        hou.setUpdateMode(updateMode)
        hou.setFrame(frame)

hipIncrementVersion()]]></script>
    <keywordList>
      <keyword>aelib</keyword>
    </keywordList>
  </tool>

  <tool name="ExtractSelected" label="ExtractSelected" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()
pname = sel[0].parent().name()

geo = hou.node('/obj').createNode('geo', pname+'_extraction')
geo.node('file1').destroy()
geo.moveToGoodPosition()

merge = geo.createNode('merge', 'MERGE')
for ind, node in enumerate(sel):
    null = node.createOutputNode("null", "OUT_"+node.name())
    path = null.path()
    name = node.name()
    
    pn = node.parent().name()
    o = merge.createInputNode(ind, 'object_merge', pn+"_"+name)
    o.parm("objpath1").set(path)
    o.moveToGoodPosition()

merge.moveToGoodPosition()
merge.setCurrent(True, True)]]></script>
  </tool>

  <tool name="CombineAll" label="CombineAllVisible" icon="SHELF_combine_objects">
    <script scriptType="python"><![CDATA[node_type = hou.nodeType(hou.objNodeTypeCategory(), 'geo')
objnodes = node_type.instances()

geo = hou.node('/obj').createNode('geo', 'CombineAll')
geo.node('file1').destroy()
geo.moveToGoodPosition()
merge = geo.createNode('merge', 'MERGE')

for ind, node in enumerate(objnodes):
    if(node.isDisplayFlagSet()):
        path = node.path()
        name = node.name()
        o = merge.createInputNode(ind, 'object_merge', name+"_merge")
        o.parm("objpath1").set(path)
        o.moveToGoodPosition()

merge.moveToGoodPosition()
merge.setCurrent(True, True)]]></script>
  </tool>

  <tool name="MultiReferenceCopy" label="MultiRefCopy" icon="SOP_duplicate">
    <script scriptType="python"><![CDATA[# Creates ref copies of nodes with absolute path references so they can be moved outside the current parent

sel = hou.selectedNodes()
tup = tuple(sel)

p = sel[0].parent()
p.copyItems(tup, True, False)]]></script>
  </tool>

  <tool name="merge" label="Merge" icon="hicon:/SVGIcons.index?SOP_merge.svg">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
parent = nodes[0].parent()
merge = parent.createNode("merge")

for node in nodes:
    if(node.type().category() == hou.sopNodeTypeCategory()):
        merge.setNextInput(node)
    
merge.moveToGoodPosition(True, False, True, True) 
merge.setSelected(True, True, False)   
merge.setDisplayFlag(True)
merge.setRenderFlag(True) # turn this off if u want]]></script>
  </tool>

  <tool name="wrangle" label="Wrangle" icon="hicon:/SVGIcons.index?SOP_attribwrangle.svg">
    <script scriptType="python"><![CDATA[# TODO insert into stream if the node has an ouput

sel = hou.selectedNodes()
if sel:
    node = hou.selectedNodes()[0]
    if node.type().category() == hou.sopNodeTypeCategory():
        parent = node.parent()
        wrangle = parent.createNode("attribwrangle")
        wrangle.setNextInput(node)
        wrangle.moveToGoodPosition(True, False, True, True) 
        wrangle.setSelected(True, True, False)  
        wrangle.setDisplayFlag(True)
        wrangle.setRenderFlag(True)]]></script>
  </tool>

  <tool name="ExtractEach" label="ExtractEach" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()
pname = sel[0].parent().name()

for ind, node in enumerate(sel):
    null = node.createOutputNode("null", "OUT_" + node.name())
    path = null.path()
    pn = node.parent().name()
    
    geo = hou.node('/obj').createNode('geo', pn + '_' + null.name() + '_extraction')
    geo.node('file1').destroy()
    geo.moveToGoodPosition()    
    
    o = geo.createNode('object_merge', pn + "_" + null.name())
    o.parm("objpath1").set(path)
    o.moveToGoodPosition()

# o.setCurrent(True, True)]]></script>
  </tool>

  <tool name="swap" label="Swap Nodes" icon="hicon:/SVGIcons.index?BUTTONS_cook.svg">
    <script scriptType="python"><![CDATA[# TODO 
# swap multiple outputs .. messy

nodes = hou.selectedNodes()

if len(nodes) == 2 or len(nodes) == 1:
    # if 1 node selected, move up the graph if it has an input, otherwise move it down 
    if(len(nodes) == 1):
        b = nodes[0]
        bin = b.inputs()
        if bin:
            a = bin[0]
        else:
            a, b = b, b.outputs()[0]
    else:
    # if 2 nodes selected, ensure a is always the higher node in the nodegraph 
        a = nodes[0]
        b = nodes[1]
        a_anc = a.inputAncestors(True, False)
        if b in a_anc:
            a, b = b, a
    
    ain = a.inputs()
    aout = a.outputs()
    bin = b.inputs()
    bout = b.outputs() 
    
    # set inputs/outputs
    AIN = ain[0] if ain else None
    AOUT = aout[0] if aout else None
    BIN = bin[0] if bin else None
    BOUT = bout[0] if bout else None
    
    # Swap, with case for a and b sequential. only first inputs/outputs modified at this time
    if BIN == a:
        b.setInput(0, AIN)
        a.setInput(0, b)       
        if BOUT: BOUT.setInput(0, a)  
    else:     
        b.setInput(0, AIN)
        a.setInput(0, BIN)
        if BOUT:
            BOUT.setInput(0, a)
        if AOUT:
            AOUT.setInput(0, b)
    
    # set positions
    apos = a.position()
    bpos = b.position()        
    b.setPosition(apos)
    a.setPosition(bpos)]]></script>
  </tool>

  <tool name="snapshot_path" label="SaveSnapshot" icon="hicon:/SVGIcons.index?BUTTONS_render.svg">
    <script scriptType="python"><![CDATA[from datetime import datetime

# ipr = hou.ui.paneTabOfType(hou.paneTabType.IPRViewer) # this doesnt actually work for some reason...There are 2 iprs?
tabs = hou.ui.currentPaneTabs()
for tab in tabs:
    if isinstance(tab, hou.IPRViewer):
        ipr = tab
        
if ipr:
    # time = datetime.now().strftime("%d-%b-%H-%M-%S")
    time2 = datetime.now().strftime("%y%m%d-%H%M%S")
    # path = "$HIP/ipr/$HIPNAME-" + time + ".png"
    path = "$HIP/ipr/" + time2 + "-$HIPNAME-" + ".png"
    
    path = hou.expandString(path)
    save = ipr.saveFrame(path)
    # Broken. When it's fixed get the right snapshot?
    # ipr.saveFrame(path, snapshot=0, xres=-1, yres=-1, color='C', alpha='C', scope='*', lut='', gamma=1.0, convert=True)]]></script>
  </tool>

  <tool name="Init_RS" label="Init_RS" icon="ROP_Redshift_ROP">
    <script scriptType="python"><![CDATA[import hou
import aeutils as ae

ae.init_RS()

]]></script>
  </tool>

  <tool name="CollectProject" label="Collect Project" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou, os, re
import shutil
import glob

from PySide2 import QtGui
from PySide2 import QtWidgets
from PySide2 import QtCore

# ===================
# UI Tests
class helloWindow(QWidget):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent, Qt.WindowStaysOnTopHint)        
        label = QLabel("Hello World",self)
        
dialog = helloWindow()
dialog.show()
# Try FileCopyProgress. Maybe just show the filename being copied for simplicity?
# ===================

IGNORE_BYPASSED = False
IGNORE_PROXY = False
COPY_NON_RELATIVE = False

# TODO
# Non-relative files
# Overwrite check
# UI for options + QProgressBar for copies?

# ==============================================================
# create collection dir in $HIP and avoid overwriting existing
# ==============================================================
def createCollectionDir():
    collectDir = '$HIP'+'/collect'
    counter = 1
    while os.path.exists(hou.expandString(collectDir)) :
        collectDir = '$HIP'+'/collect' + str(counter)
        counter = counter + 1
    collectDir = hou.expandString(collectDir)
    os.makedirs(collectDir)
    return collectDir
    
    
def collectProject():  
    # save the file, then save it to the collection dir later?
    hou.hipFile.save()
    refs = hou.fileReferences()
    collectDir = createCollectionDir()
    
    hipname = hou.hipFile.basename()
        
    # do not copy archived/proxy files?
    proxy = ['.ifd', '.ass', '.rs']
    
    # Get refs to be copied
    toCopy = []
    toCopyMisc = [] # for non-HIP/JOB files to sort out
    for ref in refs:
        parm = ref[0]
        r = ref[1]
        if parm:
            bypassed = parm.node().isGenericFlagSet(hou.nodeFlag.Bypass)
            if IGNORE_BYPASSED and bypassed:
                pass
                # copy ref if bypass option is off or node isnt bypassed
            elif IGNORE_PROXY and os.path.splitext(r)[1] in proxy:
                pass
            else:
                fname, fext = os.path.splitext(ref[1])
                if not (r.startswith('$HIP') or r.startswith('$JOB')):
                    if fext not in ignoredExt:
                        toCopyMisc.append(ref)    
                else:
                    # if not any (ref[1] in rr for rr in toCopy): # dupes?
                    toCopy.append(ref) 
                       
    # ==============================================================
    # Copy Relative files HIP/JOB
    # ==============================================================
    for ref in toCopy:
        r = ref[1]
        
        # check if the the ref is linked to another channel. If so, expand that channel value instead (to fix $OS references?)
        parm = ref[0]
        for i in xrange(10): # hack since isRef is not implemented?
            parm = parm.getReferencedParm() 
        r = re.sub('\$OS', parm.node().name(), r)
        print r
        
        p = r[4:]
        collectedPath = collectDir + p  
        # ensure the subdir exists in the collect dir        
        collectedDir = os.path.dirname(hou.expandString(collectedPath))
        if not os.path.exists(collectedDir):
            os.makedirs(collectedDir)       
            
        # For Sequences
        if re.search('\$F', r):
            print "Sequence found"
            s = re.sub('\$F\d+', '*', r)
            s = re.sub('\$F', '*', s)
            print hou.expandString(s)
            seqFiles = glob.glob(hou.expandString(s))
            if seqFiles:
                for f in seqFiles:
                    # do an overwrite check here (do not overwrite existing)
                    try:
                        shutil.copy(hou.expandString(f), collectedDir + '/' + os.path.basename(f)) 
                    except:
                        pass
            else:
                print "Error Finding File Sequence"
        # For Single Files
        else:
            # do an overwrite check here (do not overwrite existing)
            try:
                shutil.copy(hou.expandString(r), collectedPath) 
            except:
                pass
    
    # save to new loc and sort the non-HIP/JOB refs after saving?   
    hou.hipFile.save(collectDir+'/'+hipname)        
    
    # ignore refs with these extensions for refs not in $HIP or $JOB
    ignoredExt = ['.hda', '.hdalc', '.hdanc', '.otl', '.pc']    
    
    
    # ==============================================================
    # Copy NON Relative files and adjust their parms
    # ==============================================================    
    if COPY_NON_RELATIVE:
        # TODO: deal with non-$HIP refs by copying to collect/misc and then updating the parm?        
    #    for ref in toCopyMisc:
    #        r = ref[1]
    #        n = re.search( '\$F.', r) # for no padding?
    #        m = re.search( '\$F\d+', r)
    #        if m or n:
    #            print "seq not copied"
    #        else:    
    #            collectedMisc = collectDir + '/misc'
    #            if not os.path.exists(collectedMisc):
    #                os.makedirs(collectedMisc)   
    #            filename = os.path.basename(hou.expandString(r))
    #            collectedMisc = collectedMisc + '/' + filename
    #            shutil.copy(hou.expandString(r), collectedMisc) 
    #            parm = ref[0]
            
            
    # set JOB to new HIP loc
    hou.putenv('$JOB', collectDir)

collectProject()]]></script>
  </tool>
</shelfDocument>
