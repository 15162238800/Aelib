<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="aelib_shelf" label="Aelib">
    <memberTool name="blast_to_split"/>
    <memberTool name="Blast to Group-Delete"/>
    <memberTool name="ae_HipVersionIncrementer"/>
    <memberTool name="ExtractSelected"/>
    <memberTool name="ExtractEach"/>
    <memberTool name="CombineAll"/>
    <memberTool name="MultiReferenceCopy"/>
    <memberTool name="merge"/>
    <memberTool name="wrangle"/>
  </toolshelf>

  <tool name="blast_to_split" label="Blast to Split" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[for node in hou.selectedNodes():
    if(node.type() == hou.nodeType(hou.sopNodeTypeCategory(), "blast")):
        neg = node.parm("negate").evalAsInt()
        newnode = node.changeNodeType("split", False, True, False, False)
        newnode.parm("negate").set(1-neg)
    ]]></script>
  </tool>

  <tool name="Blast to Group-Delete" label="Blast to Group-Delete" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[for node in hou.selectedNodes():
    if(node.type() == hou.nodeType(hou.sopNodeTypeCategory(), "blast")):
        inv = node.parm("group").evalAsString()
        # hou.ui.displayMessage("HI")
        
        ups = node.inputs()
        if len(ups) > 0:
            group = ups[0].createOutputNode("group", "aeGroup")
        else:
            group = inv.createOutputNode("group", "aeGroup")
            
        group.parm("crname").set("aeGroup")
        group.parm("pattern").set(inv)
        
        delete = group.createOutputNode("delete", "aeDelete")
        delete.parm("group").set("aeGroup")
        delete.parm("pattern").set("*")
        
        downs = node.outputs()
        if len(downs) > 0:
            downs[0].setInput("aeDelete")
        
        node.destroy()
            ]]></script>
  </tool>

  <tool name="ae_HipVersionIncrementer" label="HIP_Increment" icon="SOP_file">
    <script scriptType="python"><![CDATA[import os, re

def hipIncrementVersion():
    # SETTINGS ==================
    setToFirstFrame = True # Sets playback frame of saved file to first frame (does not affect open file)
    setToManualUpdate = False # Sets update mode of saved file to manual (does not affect open file)
    autoversion = True # If no versioning exists, create a new version
    autoversionzfill = 3 # digit padding for autoversioning
    debug = 0 # print some items to console
    # ===========================

    orighip = hou.hipFile.name()
    hipname = hou.hipFile.basename()
    # hipfile = hipname.split(".")[0]
    # version which works for filenames with periods
    hipfile = os.path.splitext(hipname)[0]
    
    # check current filename for version prefix and split accordingly
    # Uses regex so a filename like myfile_verycool_v001.hip will get picked up correctly (not match the first _v)
    versionSections = ""
    versionType = ""
    if len(re.findall('_v(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_v(?=\d+)', hipfile, 1)        
        versionType = "_v"
    elif len(re.findall('_V(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_V(?=\d+)', hipfile, 1)          
        versionType = "_V"      

    # if no version prefix found, create it
    if versionSections == "":
        if(autoversion):
            versionSections = [hipfile, "0"*autoversionzfill]
            versionType = "_v"
            orighip = orighip.replace(hipfile, hipfile + versionType + "0"*autoversionzfill)
            print "No version found in hip name - Autoversioning"
        else:
            print "No version found in hip name - Exiting"
            return 1

    # regex - match numbers after version splitter. Match until non-numeric value is hit.  
    match = re.match('\d+', versionSections[1])    
    if match:
        versionNumber = match.group(0)
    else:
        print "Problem encountered matching version number - Exiting"
        return 1
    
    # Create new filename
    oldVersion = versionType + versionNumber
    if debug:
        print "Old version: " + oldVersion
    newVersion = versionType + str(int(versionNumber) + 1).zfill(len(versionNumber))
    newhip = orighip.replace(oldVersion, newVersion)
    if debug:    
        print "New file: " + newhip

    # Save the file
    confirm = 0
    if os.path.isfile(newhip) :
        text = "Overwrite existing hip file?"
        confirm = hou.ui.displayMessage(text, buttons=("Yes", "No"), severity=hou.severityType.Message, title="New Hip")
    if confirm == 0 :
        # update mode and frame settings
        updateMode = hou.updateModeSetting()
        frame = hou.frame()
        if (setToManualUpdate):
            hou.setUpdateMode(hou.updateMode.Manual)
        if (setToFirstFrame):
            # hou.setFrame(1)
            hou.setFrame(hou.playbar.playbackRange()[0])

        hou.hipFile.save(newhip)
        
        # reset update mode and frame
        hou.setUpdateMode(updateMode)
        hou.setFrame(frame)

hipIncrementVersion()]]></script>
    <keywordList>
      <keyword>aelib</keyword>
    </keywordList>
  </tool>

  <tool name="ExtractSelected" label="ExtractSelected" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()
pname = sel[0].parent().name()

geo = hou.node('/obj').createNode('geo', pname+'_extraction')
geo.node('file1').destroy()
geo.moveToGoodPosition()

merge = geo.createNode('merge', 'MERGE')
for ind, node in enumerate(sel):
    null = node.createOutputNode("null", "OUT_"+node.name())
    path = null.path()
    name = node.name()
    
    pn = node.parent().name()
    o = merge.createInputNode(ind, 'object_merge', pn+"_"+name)
    o.parm("objpath1").set(path)
    o.moveToGoodPosition()

merge.moveToGoodPosition()
merge.setCurrent(True, True)]]></script>
  </tool>

  <tool name="CombineAll" label="CombineAllVisible" icon="SHELF_combine_objects">
    <script scriptType="python"><![CDATA[node_type = hou.nodeType(hou.objNodeTypeCategory(), 'geo')
objnodes = node_type.instances()

geo = hou.node('/obj').createNode('geo', 'CombineAll')
geo.node('file1').destroy()
geo.moveToGoodPosition()
merge = geo.createNode('merge', 'MERGE')

for ind, node in enumerate(objnodes):
    if(node.isDisplayFlagSet()):
        path = node.path()
        name = node.name()
        o = merge.createInputNode(ind, 'object_merge', name+"_merge")
        o.parm("objpath1").set(path)
        o.moveToGoodPosition()

merge.moveToGoodPosition()
merge.setCurrent(True, True)]]></script>
  </tool>

  <tool name="MultiReferenceCopy" label="MultiRefCopy" icon="SOP_duplicate">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()
tup = tuple(sel)

p = sel[0].parent()
p.copyItems(tup, True)
# p.copyItems(tup, True, False) # absolute ref doesnt work?
# p.copyItems(tup, channel_reference_originals=False, relative_references=True)]]></script>
  </tool>

  <tool name="merge" label="Merge" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
parent = nodes[0].parent()
merge = parent.createNode("merge")

# TODO if a bunch are selected, only merge the lowest in the tree? Potentially not useful tho

for node in hou.selectedNodes():
    if(node.type().category() == hou.sopNodeTypeCategory()):
        merge.setNextInput(node)
    
merge.moveToGoodPosition(True, False, True, True) 
merge.setSelected(True, True, False)   
merge.setDisplayFlag(True)
merge.setRenderFlag(True) # turn this off if u want]]></script>
  </tool>

  <tool name="wrangle" label="Wrangle" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[# TODO insert into stream if the node has an ouput

node = hou.selectedNodes()[0]
if(node.type().category() == hou.sopNodeTypeCategory()):
    parent = node.parent()
    wrangle = parent.createNode("attribwrangle")
    wrangle.setNextInput(node)
    wrangle.moveToGoodPosition(True, False, True, True) 
    wrangle.setSelected(True, True, False)  
    wrangle.setDisplayFlag(True)
    wrangle.setRenderFlag(True)]]></script>
  </tool>

  <tool name="ExtractEach" label="ExtractEach" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()
pname = sel[0].parent().name()

for ind, node in enumerate(sel):
    null = node.createOutputNode("null", "OUT_" + node.name())
    path = null.path()
    pn = node.parent().name()
    
    geo = hou.node('/obj').createNode('geo', pn + '_' + null.name() + '_extraction')
    geo.node('file1').destroy()
    geo.moveToGoodPosition()    
    
    o = geo.createNode('object_merge', pn + "_" + null.name())
    o.parm("objpath1").set(path)
    o.moveToGoodPosition()

# o.setCurrent(True, True)]]></script>
  </tool>
</shelfDocument>
