<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="aelib_shelf" label="Aelib">
    <memberTool name="blast_to_split"/>
    <memberTool name="ExtractSelected"/>
    <memberTool name="ExtractEach"/>
    <memberTool name="CombineAll"/>
    <memberTool name="MultiReferenceCopy"/>
    <memberTool name="merge"/>
    <memberTool name="wrangle"/>
    <memberTool name="swap"/>
    <memberTool name="snapshot_path"/>
    <memberTool name="ae_HipVersionIncrementer"/>
    <memberTool name="CollectProject"/>
    <memberTool name="Init_RS"/>
    <memberTool name="Clear_RS"/>
    <memberTool name="openhip"/>
    <memberTool name="lazyproject"/>
    <memberTool name="Compiled_CopyToPoints"/>
    <memberTool name="OGL+FFmpeg+Wedge"/>
  </toolshelf>

  <tool name="blast_to_split" label="Blast to Split" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[for node in hou.selectedNodes():
    if(node.type() == hou.nodeType(hou.sopNodeTypeCategory(), "blast")):
        neg = node.parm("negate").evalAsInt()
        newnode = node.changeNodeType("split", False, True, False, False)
        newnode.parm("negate").set(1-neg)
    ]]></script>
  </tool>

  <tool name="ae_HipVersionIncrementer" label="HIP_Increment" icon="SOP_file">
    <script scriptType="python"><![CDATA[import os, re

def hipIncrementVersion():
    # SETTINGS ==================
    setToFirstFrame = True # Sets playback frame of saved file to first frame (does not affect open file)
    setToManualUpdate = False # Sets update mode of saved file to manual (does not affect open file)
    autoversion = True # If no versioning exists, create a new version
    autoversionzfill = 3 # digit padding for autoversioning
    debug = 0 # print some items to console
    # ===========================

    orighip = hou.hipFile.name()
    hipname = hou.hipFile.basename()
    # hipfile = hipname.split(".")[0]
    # version which works for filenames with periods
    hipfile = os.path.splitext(hipname)[0]
    
    # check current filename for version prefix and split accordingly
    # Uses regex so a filename like myfile_verycool_v001.hip will get picked up correctly (not match the first _v)
    versionSections = ""
    versionType = ""
    if len(re.findall('_v(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_v(?=\d+)', hipfile, 1)        
        versionType = "_v"
    elif len(re.findall('_V(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_V(?=\d+)', hipfile, 1)          
        versionType = "_V"      

    # if no version prefix found, create it
    if versionSections == "":
        if(autoversion):
            versionSections = [hipfile, "0"*autoversionzfill]
            versionType = "_v"
            orighip = orighip.replace(hipfile, hipfile + versionType + "0"*autoversionzfill)
            print "No version found in hip name - Autoversioning"
        else:
            print "No version found in hip name - Exiting"
            return 1

    # regex - match numbers after version splitter. Match until non-numeric value is hit.  
    match = re.match('\d+', versionSections[1])    
    if match:
        versionNumber = match.group(0)
    else:
        print "Problem encountered matching version number - Exiting"
        return 1
    
    # Create new filename
    oldVersion = versionType + versionNumber
    if debug:
        print "Old version: " + oldVersion
    newVersion = versionType + str(int(versionNumber) + 1).zfill(len(versionNumber))
    newhip = orighip.replace(oldVersion, newVersion)
    if debug:    
        print "New file: " + newhip

    # Save the file
    confirm = 0
    if os.path.isfile(newhip) :
        text = "Overwrite existing hip file?"
        confirm = hou.ui.displayMessage(text, buttons=("Yes", "No"), severity=hou.severityType.Message, title="New Hip")
    if confirm == 0 :
        # update mode and frame settings
        updateMode = hou.updateModeSetting()
        frame = hou.frame()
        if (setToManualUpdate):
            hou.setUpdateMode(hou.updateMode.Manual)
        if (setToFirstFrame):
            # hou.setFrame(1)
            hou.setFrame(hou.playbar.playbackRange()[0])

        hou.hipFile.save(newhip)
        
        # reset update mode and frame
        hou.setUpdateMode(updateMode)
        hou.setFrame(frame)

hipIncrementVersion()]]></script>
    <keywordList>
      <keyword>aelib</keyword>
    </keywordList>
  </tool>

  <tool name="ExtractSelected" label="ExtractSelected" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()
pname = sel[0].parent().name()

geo = hou.node('/obj').createNode('geo', pname+'_extraction')
geo.node('file1').destroy()
geo.moveToGoodPosition()

merge = geo.createNode('merge', 'MERGE')
for ind, node in enumerate(sel):
    null = node.createOutputNode("null", "OUT_"+node.name())
    path = null.path()
    name = node.name()
    
    pn = node.parent().name()
    o = merge.createInputNode(ind, 'object_merge', pn+"_"+name)
    o.parm("objpath1").set(path)
    o.moveToGoodPosition()

merge.moveToGoodPosition()
merge.setCurrent(True, True)]]></script>
  </tool>

  <tool name="CombineAll" label="CombineAllVisible" icon="SHELF_combine_objects">
    <script scriptType="python"><![CDATA[node_type = hou.nodeType(hou.objNodeTypeCategory(), 'geo')
objnodes = node_type.instances()

geo = hou.node('/obj').createNode('geo', 'CombineAll')
geo.node('file1').destroy()
geo.moveToGoodPosition()
merge = geo.createNode('merge', 'MERGE')

for ind, node in enumerate(objnodes):
    if(node.isDisplayFlagSet()):
        path = node.path()
        name = node.name()
        o = merge.createInputNode(ind, 'object_merge', name+"_merge")
        o.parm("objpath1").set(path)
        o.moveToGoodPosition()

merge.moveToGoodPosition()
merge.setCurrent(True, True)]]></script>
  </tool>

  <tool name="MultiReferenceCopy" label="MultiRefCopy" icon="SOP_duplicate">
    <script scriptType="python"><![CDATA[# Creates ref copies of nodes with absolute path references so they can be moved outside the current parent

sel = hou.selectedNodes()
tup = tuple(sel)

p = sel[0].parent()
p.copyItems(tup, True, False)]]></script>
  </tool>

  <tool name="merge" label="Merge" icon="hicon:/SVGIcons.index?SOP_merge.svg">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
parent = nodes[0].parent()

merge = parent.createNode("merge")

for node in nodes:
    if(node.type().category() == hou.sopNodeTypeCategory()):
        merge.setNextInput(node)
    elif(node.type().category() == hou.dopNodeTypeCategory()):
        merge.setNextInput(node)
    
merge.moveToGoodPosition(True, False, True, True) 

try:
    merge.setSelected(True, True, False)   
    merge.setRenderFlag(True) # turn this off if u want
    merge.setDisplayFlag(True)
except:
    merge.setDisplayFlag(False)
    pass # dop merge case]]></script>
  </tool>

  <tool name="wrangle" label="Wrangle" icon="hicon:/SVGIcons.index?SOP_attribwrangle.svg">
    <script scriptType="python"><![CDATA[# TODO insert into stream if the node has an ouput

sel = hou.selectedNodes()
if sel:
    node = hou.selectedNodes()[0]
    if node.type().category() == hou.sopNodeTypeCategory():
        parent = node.parent()
        wrangle = parent.createNode("attribwrangle")
        wrangle.setNextInput(node)
        wrangle.moveToGoodPosition(True, False, True, True) 
        wrangle.setSelected(True, True, False)  
        wrangle.setDisplayFlag(True)
        wrangle.setRenderFlag(True)]]></script>
  </tool>

  <tool name="ExtractEach" label="ExtractEach" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[sel = hou.selectedNodes()
pname = sel[0].parent().name()

for ind, node in enumerate(sel):
    null = node.createOutputNode("null", "OUT_" + node.name())
    path = null.path()
    pn = node.parent().name()
    
    geo = hou.node('/obj').createNode('geo', pn + '_' + null.name() + '_extraction')
    geo.node('file1').destroy()
    geo.moveToGoodPosition()    
    
    o = geo.createNode('object_merge', pn + "_" + null.name())
    o.parm("objpath1").set(path)
    o.moveToGoodPosition()

# o.setCurrent(True, True)]]></script>
  </tool>

  <tool name="swap" label="Swap Nodes" icon="hicon:/SVGIcons.index?BUTTONS_cook.svg">
    <script scriptType="python"><![CDATA[# TODO 
# swap multiple outputs .. messy

nodes = hou.selectedNodes()

if len(nodes) == 2 or len(nodes) == 1:
    # if 1 node selected, move up the graph if it has an input, otherwise move it down 
    if(len(nodes) == 1):
        b = nodes[0]
        bin = b.inputs()
        if bin:
            a = bin[0]
        else:
            a, b = b, b.outputs()[0]
    else:
    # if 2 nodes selected, ensure a is always the higher node in the nodegraph 
        a = nodes[0]
        b = nodes[1]
        a_anc = a.inputAncestors(True, False)
        if b in a_anc:
            a, b = b, a
    
    ain = a.inputs()
    aout = a.outputs()
    bin = b.inputs()
    bout = b.outputs() 
    
    # set inputs/outputs
    AIN = ain[0] if ain else None
    AOUT = aout[0] if aout else None
    BIN = bin[0] if bin else None
    BOUT = bout[0] if bout else None
    
    # Swap, with case for a and b sequential. only first inputs/outputs modified at this time
    if BIN == a:
        b.setInput(0, AIN)
        a.setInput(0, b)       
        if BOUT: BOUT.setInput(0, a)  
    else:     
        b.setInput(0, AIN)
        a.setInput(0, BIN)
        if BOUT:
            BOUT.setInput(0, a)
        if AOUT:
            AOUT.setInput(0, b)
    
    # set positions
    apos = a.position()
    bpos = b.position()        
    b.setPosition(apos)
    a.setPosition(bpos)]]></script>
  </tool>

  <tool name="snapshot_path" label="SaveSnapshot" icon="hicon:/SVGIcons.index?BUTTONS_render.svg">
    <script scriptType="python"><![CDATA[from datetime import datetime

# ipr = hou.ui.paneTabOfType(hou.paneTabType.IPRViewer) # this doesnt actually work for some reason...There are 2 iprs?
tabs = hou.ui.currentPaneTabs()
for tab in tabs:
    if isinstance(tab, hou.IPRViewer):
        ipr = tab
        
if ipr:
    # time = datetime.now().strftime("%d-%b-%H-%M-%S")
    time2 = datetime.now().strftime("%y%m%d-%H%M%S")
    # path = "$HIP/ipr/$HIPNAME-" + time + ".png"
    path = "$HIP/ipr/" + time2 + "-$HIPNAME-" + ".png"
    path = hou.expandString(path)
    save = ipr.saveFrame(path)

    # Broken. When it's fixed get the right snapshot?
    # ipr.saveFrame(path, snapshot=0, xres=-1, yres=-1, color='C', alpha='C', scope='*', lut='', gamma=1.0, convert=True)]]></script>
  </tool>

  <tool name="Init_RS" label="Init_RS" icon="ROP_Redshift_ROP">
    <script scriptType="python"><![CDATA[import hou
import aeutils as ae

ae.init_RS()

]]></script>
  </tool>

  <tool name="CollectProject" label="Collect Project" icon="hicon:/SVGIcons.index?NETVIEW_vex_cached_badge.svg">
    <script scriptType="python"><![CDATA[import hou, os, re, sys
import shutil
import glob
from PySide2.QtGui import *
from PySide2.QtWidgets import *
from PySide2.QtCore import *

# TODO
# Currently this will ignore non-HIP/JOB refs on DOP nodes
# For non-rel files, place images in /tex, geometry in /geo etc rather than /misc?
# Won't work with $WEDGE/$WEDGENUM and probably $ACTIVETAKE

# ===========================================
# Initial Settings Dialog
# ===========================================
class collectSettingsDialog(QDialog):
    def __init__(self, parent=None):
        super(collectSettingsDialog, self).__init__()
        self.setWindowTitle("Project Collection Settings")             
        self.setGeometry(300, 300, 400, 100)
        
        sh = hou.ui.qtStyleSheet()
        self.setStyleSheet(sh)
        
        layout = QVBoxLayout()     
        layout.setSpacing(5)        
        layout.setSizeConstraint(QLayout.SetMinimumSize)

        # Checkboxes
        self.ch_a = QCheckBox("Ignore References on Bypassed Nodes")
        self.ch_a .setChecked(True)
        layout.addWidget(self.ch_a)
        
        self.ch_b = QCheckBox("Resolve references outside $HIP/$JOB")
        self.ch_b.setChecked(True)
        layout.addWidget(self.ch_b)             
        
        self.ch_c = QCheckBox("Ignore render proxies (.ifd/.ass/.rs)")
        self.ch_c.setChecked(True)
        layout.addWidget(self.ch_c)   
        
        self.ch_d = QCheckBox("Delete non-Displayed OBJ nodes")
        self.ch_d.setChecked(False)
        layout.addWidget(self.ch_d)    
        
        # Extras TODO
        # Splitter
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setMinimumSize(0, 20)             
        layout.addWidget(line)      
        
        # Disable archiving
        self.ch_archive = QCheckBox("Disable Archival (Non-HIP/JOB files are just copied to $HIP/misc)")
        self.ch_archive.setChecked(False)
        layout.addWidget(self.ch_archive)    
        
        # File type list
        self.ch_filetype = QCheckBox("File Type Filter (Whitelist)")
        self.ch_filetype.setChecked(False)         

        layout_form = QFormLayout();    
        self.ext = QLineEdit("jpg png exr hdr tiff")
        layout_form.addRow(self.ch_filetype, self.ext);
        self.ext.setEnabled(False)
        layout.addLayout(layout_form)
        # Connect enable/disable to the checkbox
        self.ch_filetype.toggled.connect(self.ext.setEnabled)
                                                
        # ButtonBox
        bbox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)    
        bbox.setCenterButtons(True)
        bbox.setMinimumSize(0, 40)   
        bbox.accepted.connect(self.accept)
        bbox.rejected.connect(self.reject)
        layout.addWidget(bbox)
                      
        self.setLayout(layout)      
                
        # Style all checkboxes test
#        cbs = self.findChildren(QCheckBox)        
#        for w in cbs:
#                w.setStyleSheet("""QCheckBox::checked {
#                color: #00FF00;
#                }""")        
                
                     
    def getValues(self):
        return [self.ch_a.isChecked(), self.ch_b.isChecked(), self.ch_c.isChecked(), self.ch_d.isChecked(), self.ch_archive.isChecked(), self.ch_filetype.isChecked(), self.ext.text()]   
        
# ==============================================================
# Create collection dir in $HIP and avoid overwriting existing
# ==============================================================
def createCollectionDir():
    collectDir = '$HIP'+'/collect'
    counter = 1
    while os.path.exists(hou.expandString(collectDir)) :
        collectDir = '$HIP'+'/collect' + str(counter)
        counter = counter + 1
    collectDir = hou.expandString(collectDir)
    os.makedirs(collectDir)
    return collectDir

def getObjParent(node):
    if isinstance(node, hou.ObjNode):
        return node
    parent = node.parent()
    if not parent:
        return None
    return getObjParent(parent)
    
# copying with larger buffer for better performance?    
def fastCopy(src, dst):
    with open(src, 'rb') as fin:
        with open(dst, 'wb') as fout:
            shutil.copyfileobj(fin, fout, 128*1024)
    
def collectProject(settings):
    IGNORE_BYPASSED = settings[0]
    COPY_NON_RELATIVE = settings[1]
    IGNORE_PROXY = settings[2]
    IGNORE_NONDISPLAY = settings[3]
    DISABLE_ARCHIVE = settings[4]
    FILETYPE_FILTER = settings[5]
    FILETYPES = settings[6]
    
    # save the file, then save it to the collection dir later?
    # hou.setUpdateMode(hou.updateMode.Manual)        
    hou.setFrame(hou.playbar.playbackRange()[0])    
    
    hou.hipFile.save()
    hipname = hou.hipFile.basename()    
    refs = hou.fileReferences()
    
    if DISABLE_ARCHIVE:
        collectDir = hou.expandString('$HIP')
    else:
        collectDir = createCollectionDir()
    
    # ignore archived/proxy files
    proxy = ['.ifd', '.ass', '.rs']
    # ignore refs with these extensions for refs not in $HIP or $JOB
    ignoredExt = ['.hda', '.hdalc', '.hdanc', '.otl', '.pc', '.pmap', '.simdata', '.h']       
    # filetype whitelist 
    if FILETYPE_FILTER:
        extfilter = ['.' + x for x in FILETYPES.split()]
        
    # TODO Also delete non-displayed OBJ nodes when they are ignored?
    toDel = []
    # Get refs to be copied
    toCopy = []
    toCopyMisc = [] # for non-HIP/JOB files to sort out
    for ref in refs:
        parm = ref[0]
        r = ref[1]
        if parm:
            for i in xrange(10): # hack to get referenced parm since isRef is not implemented?
                parm = parm.getReferencedParm()                
            bypassed = parm.node().isGenericFlagSet(hou.nodeFlag.Bypass)
            # Testing for display flag. Could also apply to DOPs but maybe a bad idea..
            disp = True
            if isinstance(parm.node(), hou.SopNode):
                top = getObjParent(parm.node())
                if top:
                    disp = top.isGenericFlagSet(hou.nodeFlag.Display)  
            #
            if IGNORE_NONDISPLAY and not disp:
                toDel.append(top)
            # copy ref if bypass option is off or node isnt bypassed                  
            elif IGNORE_BYPASSED and bypassed:
                pass
            # copy ref if proxy filter off or ref extension isnt a render proxy                
            elif IGNORE_PROXY and os.path.splitext(r)[1] in proxy:
                pass
            else:
                fname, fext = os.path.splitext(ref[1])
                # check for file extension filter
                if not FILETYPE_FILTER or fext in extfilter:
                    if not (r.startswith('$HIP') or r.startswith('$JOB')):
                        if COPY_NON_RELATIVE and fext not in ignoredExt:
                            # Ignore Dop Nodes for now? Also ignore op: refs?
                            if not isinstance(parm.node(), hou.DopNode) and not r.startswith('op'):
                                toCopyMisc.append(ref)    
                    elif not DISABLE_ARCHIVE:
                        toCopy.append(ref) 
    
    # Delete Non-Displayed
    if IGNORE_NONDISPLAY:
        randomNode = hou.node("/").children()[0]
        randomNode.deleteItems(toDel)
                    
    # Create Progress Bar
    numToCopy = len(toCopy) + len(toCopyMisc)
    pbar = QProgressDialog("Copying Files", "Abort", 0, numToCopy);
    pbar.setWindowTitle("Collect Progress")  
    pbar.setWindowModality(Qt.WindowModal);        
    pbar.setStyleSheet(hou.ui.qtStyleSheet())
    l = pbar.layout()
    if l:
        l.setSizeConstraint(QLayout.SetMaximumSize)
    pbar.setValue(0)        
    pbar.forceShow()
                       
    # ==============================================================
    # Copy Relative files HIP/JOB
    # ==============================================================
    if not DISABLE_ARCHIVE:
        for ref in toCopy:
            r = ref[1]
            
            # Increment Progress bar. This seems to show the previous item??
            pbar.setValue(pbar.value()+1)
            pbar.setLabelText(r)
            if pbar.wasCanceled():
                break        
            
            # Check if the the ref is linked to another channel. If so, expand that channel value instead (to fix $OS references?)
            parm = ref[0]
            for i in xrange(10): # hack since isRef is not implemented?
                parm = parm.getReferencedParm() 
            r = re.sub('\$OS', parm.node().name(), r)
            
            p = r[4:]
            collectedPath = collectDir + p  
            # ensure the subdir exists in the collect dir        
            collectedDir = os.path.dirname(hou.expandString(collectedPath))
            if not os.path.exists(collectedDir):
                os.makedirs(collectedDir)       
                     
            # Copy Sequences
            if re.search('\$F', r):
                s = re.sub('\$F\d+', '*', r)
                s = re.sub('\$F', '*', s)
                print "$HIP/$JOB Sequence found:" + hou.expandString(s) 
                seqFiles = glob.glob(hou.expandString(s))
                if seqFiles:
                    for f in seqFiles:
                        try:
                            copiedFilePath = collectedDir + '/' + os.path.basename(f)                    
                            if not os.path.exists(copiedFilePath):
                                shutil.copy(hou.expandString(f), copiedFilePath) 
                        except:
                            pass
                else:
                    print "Error Finding File Sequence - No items copied"
            # Copy Single Files
            else:
                try:
                    print "$HIP/$JOB File found:" + str(r)
                    if not os.path.exists(collectedPath):
                        shutil.copy(hou.expandString(r), collectedPath)             
                except Exception as e:
                    pass
                    # print(e)   
    
    # save to new loc and sort the non-HIP/JOB refs after saving?   
    hou.hipFile.save(collectDir+'/'+hipname)        
        
    # ==============================================================
    # Copy NON Relative files and adjust their parms
    # ==============================================================   
    
    # Debugging
    DEBUG = False
    if DEBUG:
        print toCopyMisc
        print collectDir
    
    if COPY_NON_RELATIVE and not DEBUG:
        # Create misc dir
        collectedMisc = ""
        if toCopyMisc:
            collectedMisc = collectDir + '/misc'
            if not os.path.exists(collectedMisc):
                    os.makedirs(collectedMisc)         
    
        for ref in toCopyMisc:
            r = ref[1]

            # Increment Progress bar. This seems to show the previous item??
            pbar.setValue(pbar.value()+1)
            pbar.setLabelText(r)
            if pbar.wasCanceled():
                break        
            
            # Check if the the ref is linked to another channel. If so, expand that channel value instead (to fix $OS references?)
            parm = ref[0]
            for i in xrange(10): # hack since isRef is not implemented?
                parm = parm.getReferencedParm() 
            r = re.sub('\$OS', parm.node().name(), r)
                         
            # Copy Sequences
            if re.search('\$F', r):                
                s = re.sub('\$F\d+', '*', r)
                s = re.sub('\$F', '*', s)
                print "Non-$HIP/$JOB Sequence found:" + hou.expandString(s) 
                seqFiles = glob.glob(hou.expandString(s))
                if seqFiles:
                    try:
                        l = parm.expression()
                        # set new parm value (with correct unexpanded $F string?)
                        try:
                            parm.set('$HIP/misc/'+ os.path.basename(r))                
                        except:
                            print "unable to change parm: "+parm.path()                        
                    except:
                        print "not adjusting parm value as it contains an expression"                    
                    for f in seqFiles:
                        try:
                            copiedFilePath = collectedMisc + '/' + os.path.basename(f)                    
                            if not os.path.exists(copiedFilePath):
                                shutil.copy(hou.expandString(f), copiedFilePath) 
                        except:
                            pass
                else:
                    print "Error Finding File Sequence - No items copied"
            # Copy Single Files
            else:
                filename = os.path.basename(hou.expandString(r))
                collectedMiscTemp = collectedMisc + '/' + filename  
                # try to set new parm value
                try:
                    l = parm.expression()                
                    try:
                        parm.set('$HIP/misc/'+filename)
                    except:
                        print "unable to change parm: "+parm.path()
                except:
                    print "not adjusting parm value as it contains an expression"                        
                try:
                    print "Non-$HIP/$JOB File found:" + str(r)                 
                    if not os.path.exists(collectedMiscTemp):
                        fastCopy(hou.expandString(r), collectedMiscTemp)
                        #shutil.copy(hou.expandString(r), collectedMiscTemp)  
                        # use system / subprocess?
#                        if sys.platform == 'win32':
#                            # this pops up a window for some reason..?
#                            os.system('xcopy "%s" "%s"' % (hou.expandString(r), collectedMiscTemp))
#                        else:
#                            shutil.copy(hou.expandString(r), collectedMiscTemp)
                except Exception as e:
                    pass
                    # print(e)          
    # set JOB to new HIP loc
    hou.putenv('$JOB', collectDir)

dialog = collectSettingsDialog()
dialog.exec_()
if dialog.result() == 1:
    settings = dialog.getValues()
    collectProject(settings)    
else:
    pass
    # print "Collect Project Cancelled"]]></script>
  </tool>

  <tool name="openhip" label="Open HIP Folder" icon="hicon:/SVGIcons.index?DATATYPES_bundle.svg">
    <script scriptType="python"><![CDATA[import os
import hou
import sys
import subprocess

hip = hou.getenv('HIP')

platform = sys.platform
if platform == "win32":
    # subprocess.Popen(["explorer", self.job])
    os.startfile(hip)
elif platform == "darwin": #osx
    subprocess.Popen(["open", hip])
else: #linux
    subprocess.Popen(["xdg-open", hip])
]]></script>
  </tool>

  <tool name="Clear_RS" label="Clear RS" icon="hicon:/SVGIcons.index?PARTS_delete_x.svg">
    <script scriptType="python"><![CDATA[import hou

rem = ['Redshift', 'redshift', 'RS', 'rs']

allNodes = hou.node('/').allSubChildren()
for n in allNodes:
    try:
        type = n.type().name()
        # print type
        # if any (x in type for x in rem):
        if any (type.startswith(x) for x in rem):
            try:
                n.destroy()
            except: pass
                # print "couldnt delete node as inside locked parent"
    except: pass
        # print "node has destroyed already by parent deletion"

        
# Still can't get the RS hscript commands working from python
#objnodes = hou.node('/obj').children()
#for o in objnodes:
#    n.setCurrent(True, True)
#    rs = hou.hscript('Redshift_removeObjectSpareParameters')
#    print rs]]></script>
  </tool>

  <tool name="lazyproject" label="Lazy Project Create" icon="hicon:/SVGIcons.index?DATATYPES_bundle.svg">
    <script scriptType="python"><![CDATA[import hou, os, re, sys
import shutil
import glob
from PySide2.QtGui import *
from PySide2.QtWidgets import *
from PySide2.QtCore import *

# Create Dirs at HIP if they dont exist
class Lazyproj(QDialog):
    def __init__(self, parent=None):
        super(Lazyproj, self).__init__()
        self.setWindowTitle("Project Collection Settings")             
        self.setGeometry(400, 200, 400, 100)
        
        self.setStyleSheet(hou.ui.qtStyleSheet())
        layout = QVBoxLayout()        
        layout.setSizeConstraint(QLayout.SetMinimumSize)
        
        # File type list
        self.label_dirs = QLabel("Directories to Create")      
        self.dirs = QLineEdit("abc geo tex render flip comp")
        layout_form = QFormLayout()        
        layout_form.addRow(self.label_dirs, self.dirs)
        layout.addLayout(layout_form)
  
        # ButtonBox
        bbox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)    
        bbox.setCenterButtons(True)
        bbox.setMinimumSize(0, 40)   
        bbox.accepted.connect(self.makeDirs)
        bbox.rejected.connect(self.reject)
        layout.addWidget(bbox)
                      
        self.setLayout(layout)              
        
    def makeDirs(self):
        createdirs = [x for x in self.dirs.text().split()]        
        hip = hou.expandString('$HIP')
        for d in createdirs:
            dd = hip + "/" + d
            if not os.path.exists(dd):
                os.makedirs(dd)         
        hou.putenv('$JOB', hip)        
        super(Lazyproj, self).accept()                              
                        
dialog = Lazyproj()
dialog.exec_()        ]]></script>
  </tool>

  <tool name="Compiled_CopyToPoints" label="Compiled_CopyToPoints" icon="hicon:/SVGIcons.index?SOP_foreach.svg">
    <toolMenuContext name="network">
      <contextOpType>Sop/compile_begin</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('block_begin'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_obj_geo1_compile_begin2 (Sop/compile_begin)
set _obj_geo1_compile_begin2 = `run("opadd -e -n -v compile_begin compile_begin2")`
oplocate -x `$arg2 + -2.6615529276545047` -y `$arg3 + 0.027349291519179086` $_obj_geo1_compile_begin2
opparm -V 16.5.405 $_obj_geo1_compile_begin2 blockpath ( ../compile_end1 )
opcolor -c 0.75 0.75 0 $_obj_geo1_compile_begin2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_compile_begin2
opexprlanguage -s hscript $_obj_geo1_compile_begin2
opuserdata -n '___Version___' -v '16.5.405' $_obj_geo1_compile_begin2
opset -p on $_obj_geo1_compile_begin2
opcf $arg1

# Node $_obj_geo1_foreach_end2 (Sop/block_end)
set _obj_geo1_foreach_end2 = `run("opadd -e -n -v block_end foreach_end2")`
oplocate -x `$arg2 + 0` -y `$arg3 + -4.5303117513782833` $_obj_geo1_foreach_end2
opparm -V 16.5.405 $_obj_geo1_foreach_end2 itermethod ( pieces ) method ( merge ) useattrib ( off ) blockpath ( ../foreach_begin2 ) templatepath ( ../foreach_begin2 ) multithread ( on )
opcolor -c 0.75 0.40000000596046448 0 $_obj_geo1_foreach_end2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_foreach_end2
opexprlanguage -s hscript $_obj_geo1_foreach_end2
opset -p on $_obj_geo1_foreach_end2
opcf $arg1

# Node $_obj_geo1_foreach_begin2 (Sop/block_begin)
set _obj_geo1_foreach_begin2 = `run("opadd -e -n -v block_begin foreach_begin2")`
oplocate -x `$arg2 + 0` -y `$arg3 + -1.0856999948620796` $_obj_geo1_foreach_begin2
opparm -V 16.5.405 $_obj_geo1_foreach_begin2 method ( piece ) blockpath ( ../foreach_end2 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_geo1_foreach_begin2
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_foreach_begin2
opexprlanguage -s hscript $_obj_geo1_foreach_begin2
opuserdata -n '___Version___' -v '16.5.405' $_obj_geo1_foreach_begin2
opset -p on $_obj_geo1_foreach_begin2
opcf $arg1

# Node $_obj_geo1_compile_end1 (Sop/compile_end)
set _obj_geo1_compile_end1 = `run("opadd -e -n -v compile_end compile_end1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -5.616011742515072` $_obj_geo1_compile_end1
opcolor -c 0.75 0.75 0 $_obj_geo1_compile_end1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_compile_end1
opexprlanguage -s hscript $_obj_geo1_compile_end1
opset -p on $_obj_geo1_compile_end1
opcf $arg1

# Node $_obj_geo1_compile_begin1 (Sop/compile_begin)
set _obj_geo1_compile_begin1 = `run("opadd -e -n -v compile_begin compile_begin1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_obj_geo1_compile_begin1
opparm -V 16.5.405 $_obj_geo1_compile_begin1 blockpath ( ../compile_end1 )
opcolor -c 0.75 0.75 0 $_obj_geo1_compile_begin1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_compile_begin1
opexprlanguage -s hscript $_obj_geo1_compile_begin1
opuserdata -n '___Version___' -v '16.5.405' $_obj_geo1_compile_begin1
opset -p on $_obj_geo1_compile_begin1
opcf $arg1

# Node $_obj_geo1_copytopoints1 (Sop/copytopoints)
set _obj_geo1_copytopoints1 = `run("opadd -e -n -v copytopoints copytopoints1")`
oplocate -x `$arg2 + -0.0016000135219655931` -y `$arg3 + -3.3764705944490778` $_obj_geo1_copytopoints1
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_obj_geo1_copytopoints1
opexprlanguage -s hscript $_obj_geo1_copytopoints1
opset -p on $_obj_geo1_copytopoints1
opcf $arg1

# Node $_obj_geo1_foreach_begin3 (Sop/block_begin)
set _obj_geo1_foreach_begin3 = `run("opadd -e -n -v block_begin foreach_begin3")`
oplocate -x `$arg2 + -2.6615529276545047` -y `$arg3 + -1.0583507033429005` $_obj_geo1_foreach_begin3
opparm -V 16.5.405 $_obj_geo1_foreach_begin3 method ( input ) blockpath ( ../foreach_end2 )
opcolor -c 0.75 0.40000000596046448 0 $_obj_geo1_foreach_begin3
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F off -c on -e on -b off $_obj_geo1_foreach_begin3
opexprlanguage -s hscript $_obj_geo1_foreach_begin3
opuserdata -n '___Version___' -v '16.5.405' $_obj_geo1_foreach_begin3
opset -p on $_obj_geo1_foreach_begin3

opcf $arg1
opwire -n $_obj_geo1_noise_ql1 -0 $_obj_geo1_compile_begin2
opcf $arg1
opwire -n $_obj_geo1_copytopoints1 -0 $_obj_geo1_foreach_end2
opcf $arg1
opwire -n $_obj_geo1_compile_begin1 -0 $_obj_geo1_foreach_begin2
opcf $arg1
opwire -n $_obj_geo1_foreach_end2 -0 $_obj_geo1_compile_end1
opcf $arg1
opwire -n $_obj_geo1_scatter3 -0 $_obj_geo1_compile_begin1
opcf $arg1
opwire -n $_obj_geo1_foreach_begin3 -0 $_obj_geo1_copytopoints1
opwire -n $_obj_geo1_foreach_begin2 -1 $_obj_geo1_copytopoints1
opcf $arg1
opwire -n $_obj_geo1_compile_begin2 -0 $_obj_geo1_foreach_begin3

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_obj_geo1_compile_end1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_obj_geo1_compile_begin1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>

  <tool name="OGL+FFmpeg+Wedge" label="OGL+FFmpeg+Wedge" icon="MISC_generic">
    <toolMenuContext name="network">
      <contextNetType>ROP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import sys
import toolutils

outputitem = None
inputindex = -1
inputitem = None
outputindex = -1

num_args = 1
h_extra_args = ''
pane = toolutils.activePane(kwargs)
if not isinstance(pane, hou.NetworkEditor):
    pane = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
    if pane is None:
       hou.ui.displayMessage(
               'Cannot create node: cannot find any network pane')
       sys.exit(0)
else: # We're creating this tool from the TAB menu inside a network editor
    pane_node = pane.pwd()
    if kwargs.has_key("outputnodename") and kwargs.has_key("inputindex"):
        outputitem = pane_node.item(kwargs["outputnodename"])
        inputindex = kwargs["inputindex"]
        h_extra_args += 'set arg4 = "' + kwargs["outputnodename"] + '"\n'
        h_extra_args += 'set arg5 = "' + str(inputindex) + '"\n'
        num_args = 6
    if kwargs.has_key("inputnodename") and kwargs.has_key("outputindex"):
        inputitem = pane_node.item(kwargs["inputnodename"])
        outputindex = kwargs["outputindex"]
        h_extra_args += 'set arg6 = "' + kwargs["inputnodename"] + '"\n'
        h_extra_args += 'set arg9 = "' + str(outputindex) + '"\n'
        num_args = 9 
    if kwargs.has_key("autoplace"):
        autoplace = kwargs["autoplace"]
    else:
        autoplace = False
    # If shift-clicked we want to auto append to the current
    # node
    if kwargs.has_key("shiftclick") and kwargs["shiftclick"]:
        if inputitem is None:
            inputitem = pane.currentNode()
            outputindex = 0
    if kwargs.has_key("nodepositionx") and             kwargs.has_key("nodepositiony"):
        try:
            pos = [ float( kwargs["nodepositionx"] ),
                    float( kwargs["nodepositiony"] )]
        except:
            pos = None
    else:
        pos = None

    if not autoplace and not pane.listMode():
        if pos is not None:
            pass
        elif outputitem is None:
            pos = pane.selectPosition(inputitem, outputindex, None, -1)
        else:
            pos = pane.selectPosition(inputitem, outputindex,
                                      outputitem, inputindex)

    if pos is not None:
        if kwargs.has_key("node_bbox"):
            size = kwargs["node_bbox"]
            pos[0] -= size[0] / 2
            pos[1] -= size[1] / 2
        else:
            pos[0] -= 0.573625
            pos[1] -= 0.220625
        h_extra_args += 'set arg2 = "' + str(pos[0]) + '"\n'
        h_extra_args += 'set arg3 = "' + str(pos[1]) + '"\n'
h_extra_args += 'set argc = "' + str(num_args) + '"\n'
            
pane_node = pane.pwd()
child_type = pane_node.childTypeCategory().nodeTypes()

if not child_type.has_key('ae::FFmpegify::1'):
   hou.ui.displayMessage(
           'Cannot create node: incompatible pane network type')
   sys.exit(0)

# First clear the node selection
pane_node.setSelected(False, True)

h_path = pane_node.path()
h_preamble = 'set arg1 = "' + h_path + '"\n'
h_cmd = r''' 
if ($argc < 2 || "$arg2" == "") then
   set arg2 = 0
endif
if ($argc < 3 || "$arg3" == "") then
   set arg3 = 0
endif
# Automatically generated script
# $arg1 - the path to add this node
# $arg2 - x position of the tile
# $arg3 - y position of the tile
# $arg4 - input node to wire to
# $arg5 - which input to wire to
# $arg6 - output node to wire to
# $arg7 - the type of this node
# $arg8 - the node is an indirect input
# $arg9 - index of output from $arg6

\set noalias = 1
set saved_path = `execute("oppwf")`
opcf $arg1

# Node $_out_opengl1 (Driver/opengl)
set _out_opengl1 = `run("opadd -e -n -v opengl opengl1")`
oplocate -x `$arg2 + 0` -y `$arg3 + 0` $_out_opengl1
chblockbegin
chadd -t 0 0 $_out_opengl1 f1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F '$FSTART' $_out_opengl1/f1
chadd -t 0 0 $_out_opengl1 f2
chkey -t 0 -v 240 -m 0 -a 0 -A 0 -T a  -F '$FEND' $_out_opengl1/f2
chblockend
opparm -V 16.5.405 $_out_opengl1 trange ( normal ) f ( f1 f2 1 ) stdswitch ( 1 1 1 1 1 1 ) picture ( '$HIP/flip/$HIPNAME/$WEDGENUM/$HIPNAME.$F4.png' ) gamma ( 2.2000000000000002 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_out_opengl1
opexprlanguage -s hscript $_out_opengl1
opuserdata -n '___Version___' -v '16.5.405' $_out_opengl1
opset -p on $_out_opengl1
opcf $arg1

# Node $_out_wedge1 (Driver/wedge)
set _out_wedge1 = `run("opadd -e -n -v wedge wedge1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -3.0000010000000001` $_out_wedge1
opparm $_out_wedge1  wedgeparams ( 1 )
chblockbegin
chadd -t 0 0 $_out_wedge1 steps1
chkey -t 0 -v 1 -m 0 -a 0 -A 0 -T a  -F 'ch("range1y")+1' $_out_wedge1/steps1
chblockend
opparm $_out_wedge1 random ( off ) wedgeparams ( 1 ) range1 ( 0 5 ) steps1 ( steps1 )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_out_wedge1
opexprlanguage -s hscript $_out_wedge1
opuserdata -n '___Version___' -v '' $_out_wedge1
opset -p on $_out_wedge1
opcf $arg1

# Node $_out_batch1 (Driver/batch)
set _out_batch1 = `run("opadd -e -n -v batch batch1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -1.0000000000000002` $_out_batch1
opparm -V 16.5.405 $_out_batch1 fullrange ( on )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_out_batch1
opexprlanguage -s hscript $_out_batch1
opuserdata -n '___Version___' -v '16.5.405' $_out_batch1
opset -p on $_out_batch1
opcf $arg1

# Node $_out_FFmpegify1 (ae::Driver/FFmpegify::1)
set _out_FFmpegify1 = `run("opadd -e -n -v ae::FFmpegify::1 FFmpegify1")`
oplocate -x `$arg2 + 0` -y `$arg3 + -2.0000010000000001` $_out_FFmpegify1
chblockbegin
chadd -t 0 0 $_out_FFmpegify1 path
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'hou.phm().autoPath(hou.node(\'.\'))' -l p $_out_FFmpegify1/path
chadd -t 0 0 $_out_FFmpegify1 fps
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F '$FPS' $_out_FFmpegify1/fps
chadd -t 0 0 $_out_FFmpegify1 cmd
chkey -t 0 -v 0 -m 0 -a 0 -A 0 -T a  -F 'hou.phm().cmd(hou.node(\'.\'))' -l p $_out_FFmpegify1/cmd
chblockend
opparm $_out_FFmpegify1 save_adjacent ( on )
opset -d off -r off -h off -f off -y off -t off -l off -s off -u off -F on -c on -e on -b off $_out_FFmpegify1
opexprlanguage -s hscript $_out_FFmpegify1
opuserdata -n '___Version___' -v '' $_out_FFmpegify1
opset -p on $_out_FFmpegify1

opcf $arg1
opcf $arg1
opwire -n $_out_FFmpegify1 -0 $_out_wedge1
opcf $arg1
opwire -n $_out_opengl1 -0 $_out_batch1
opcf $arg1
opwire -n $_out_batch1 -0 $_out_FFmpegify1

set oidx = 0
if ($argc >= 9 && "$arg9" != "") then
    set oidx = $arg9
endif

if ($argc >= 5 && "$arg4" != "") then
    set output = $_out_FFmpegify1
    opwire -n $output -$arg5 $arg4
endif
if ($argc >= 6 && "$arg6" != "") then
    set input = $_out_opengl1
    if ($arg8) then
        opwire -n -i $arg6 -0 $input
    else
        opwire -n -o $oidx $arg6 -0 $input
    endif
endif
opcf $saved_path
'''
hou.hscript(h_preamble + h_extra_args + h_cmd)
]]></script>
  </tool>
</shelfDocument>
