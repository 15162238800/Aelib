<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="aelib_shelf" label="Aelib">
    <memberTool name="nodeclrs"/>
    <memberTool name="reset_colours"/>
    <memberTool name="caps"/>
    <memberTool name="blast_to_split"/>
    <memberTool name="Blast to Group-Delete"/>
    <memberTool name="iterate"/>
    <memberTool name="merge"/>
    <memberTool name="xform"/>
    <memberTool name="copy"/>
    <memberTool name="null"/>
    <memberTool name="wrangle"/>
    <memberTool name="ae_HipVersionIncrementer"/>
  </toolshelf>

  <tool name="reset_colours" label="Reset Colours" icon="COP2_colorwheel">
    <script scriptType="python"><![CDATA[root = hou.node("/")
       
for cur_node in root.allNodes():
    hcol = hou.Color()
    hcol.setRGB((0.8, 0.8, 0.8))
    cur_node.setColor(hcol)
]]></script>
  </tool>

  <tool name="blast_to_split" label="Blast to Split" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[for node in hou.selectedNodes():
    if(node.type() == hou.nodeType(hou.sopNodeTypeCategory(), "blast")):
        # inv = node.parm("negate").evalAsInt()
        newnode = node.changeNodeType("split", False, True, True, False)
        # newnode.parm("negate").set(1-negate)
    ]]></script>
  </tool>

  <tool name="null" label="Null (N)" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    node = hou.selectedNodes()[0]
    
    if(node.type().category() == hou.sopNodeTypeCategory()):
        parent = node.parent()
        null = parent.createNode("null")
        null.setNextInput(node)
        null.moveToGoodPosition(True, False, True, True)
        
        null.setSelected(True, True, False)  
        null.setCurrent(True)
        null.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="copy" label="Copy (X)" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):

    nodes = hou.selectedNodes()
    if(nodes[0].type().category() == hou.sopNodeTypeCategory()):
        parent = nodes[0].parent()
        copy = parent.createNode("copy")
        if(len(nodes) == 1):
            copy.setNextInput(nodes[0])
        else:
            copy.setNextInput(nodes[0])
            copy.setNextInput(nodes[1])
        copy.moveToGoodPosition(True, False, True, True) 
        copy.setSelected(True, True, False)   
        copy.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="xform" label="Transform (T)" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    node = hou.selectedNodes()[0]
    if(node.type().category() == hou.sopNodeTypeCategory()):
        parent = node.parent()
        trans = parent.createNode("xform")
        trans.setNextInput(node)
        trans.moveToGoodPosition(True, False, True, True) 
        trans.setSelected(True, True, False)  
        trans.setDisplayFlag(True)    ]]></script>
  </tool>

  <tool name="merge" label="Merge (M)" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    nodes = hou.selectedNodes()
    parent = nodes[0].parent()
    merge = parent.createNode("merge")
    
    for node in hou.selectedNodes():
        if(node.type().category() == hou.sopNodeTypeCategory()):
            merge.setNextInput(node)
        
    merge.moveToGoodPosition(True, False, True, True) 
    merge.setSelected(True, True, False)   
    merge.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="nodeclrs" label="ColorLib" icon="COP2_colorwheel">
    <script scriptType="python"><![CDATA[import os

#Add dynamic path to houdini home folder
BASE_PATH = hou.hscriptExpression("$HOME").replace("/", "\\")
PY_PATH = "".join([BASE_PATH,"\houdini15.5",
                             "\scripts\colorLab\ColorLab_v1.0.py"])
execfile(PY_PATH)   ]]></script>
  </tool>

  <tool name="wrangle" label="Wrangle (W)" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[if(len(hou.selectedNodes()) > 0):
    node = hou.selectedNodes()[0]
    if(node.type().category() == hou.sopNodeTypeCategory()):
        parent = node.parent()
        wrangle = parent.createNode("attribwrangle")
        wrangle.setNextInput(node)
        wrangle.moveToGoodPosition(True, False, True, True) 
        wrangle.setSelected(True, True, False)  
        
        # wrangle.setCurrent(True, True)
        wrangle.setDisplayFlag(True)]]></script>
  </tool>

  <tool name="caps" label="Caps/Uncaps" icon="SOP_font">
    <script scriptType="python"><![CDATA[nodes = hou.selectedNodes()
for node in nodes:
    name = node.name()
    if(name[0].islower()):
        node.setName(name.upper())
    elif(name[0].isupper()):
        node.setName(name.lower())    ]]></script>
  </tool>

  <tool name="iterate" label="IterateNodes" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[allNodes = hou.node(â/objâ).allSubChildren()

for node in allNodes:
    print node.name()]]></script>
  </tool>

  <tool name="Blast to Group-Delete" label="Blast to Group-Delete" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[for node in hou.selectedNodes():
    if(node.type() == hou.nodeType(hou.sopNodeTypeCategory(), "blast")):
        inv = node.parm("group").evalAsString()
        # hou.ui.displayMessage("HI")
        
        ups = node.inputs()
        if len(ups) > 0:
            group = ups[0].createOutputNode("group", "aeGroup")
        else:
            group = inv.createOutputNode("group", "aeGroup")
            
        group.parm("crname").set("aeGroup")
        group.parm("pattern").set(inv)
        
        delete = group.createOutputNode("delete", "aeDelete")
        delete.parm("group").set("aeGroup")
        delete.parm("pattern").set("*")
        
        downs = node.outputs()
        if len(downs) > 0:
            downs[0].setInput("aeDelete")
        
        node.destroy()
            ]]></script>
  </tool>

  <tool name="ae_HipVersionIncrementer" label="HIP_Increment" icon="SOP_file">
    <script scriptType="python"><![CDATA[import os, re

def hipIncrementVersion():
    # SETTINGS ==================
    setToFirstFrame = True # Sets playback frame of saved file to first frame (does not affect open file)
    setToManualUpdate = False # Sets update mode of saved file to manual (does not affect open file)
    autoversion = True # If no versioning exists, create a new version
    autoversionzfill = 3 # digit padding for autoversioning
    debug = 0 # print some items to console
    # ===========================

    orighip = hou.hipFile.name()
    hipname = hou.hipFile.basename()
    hipfile = hipname.split(".")[0]

    # check current filename for version prefix and split accordingly
    # Uses regex so a filename like myfile_verycool_v001.hip will get picked up correctly (not match the first _v)
    versionSections = ""
    versionType = ""
    if len(re.findall('_v(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_v(?=\d+)', hipfile, 1)        
        versionType = "_v"
    elif len(re.findall('_V(?=\d+)', hipfile)) > 0:
        versionSections = re.split('_V(?=\d+)', hipfile, 1)          
        versionType = "_V"      

    # if no version prefix found, create it
    if versionSections == "":
        if(autoversion):
            versionSections = [hipfile, "0"*autoversionzfill]
            versionType = "_v"
            orighip = orighip.replace(hipfile, hipfile + versionType + "0"*autoversionzfill)
            print "No version found in hip name - Autoversioning"
        else:
            print "No version found in hip name - Exiting"
            return 1

    # regex - match numbers after version splitter. Match until non-numeric value is hit.  
    match = re.match('\d+', versionSections[1])    
    if match:
        versionNumber = match.group(0)
    else:
        print "Problem encountered matching version number - Exiting"
        return 1
    
    # Create new filename
    oldVersion = versionType + versionNumber
    if debug:
        print "Old version: " + oldVersion
    newVersion = versionType + str(int(versionNumber) + 1).zfill(len(versionNumber))
    newhip = orighip.replace(oldVersion, newVersion)
    if debug:    
        print "New file: " + newhip

    # Save the file
    confirm = 0
    if os.path.isfile(newhip) :
        text = "Overwrite existing hip file?"
        confirm = hou.ui.displayMessage(text, buttons=("Yes", "No"), severity=hou.severityType.Message, title="New Hip")
    if confirm == 0 :
        # update mode and frame settings
        updateMode = hou.updateModeSetting()
        frame = hou.frame()
        if (setToManualUpdate):
            hou.setUpdateMode(hou.updateMode.Manual)
        if (setToFirstFrame):
            # hou.setFrame(1)
            hou.setFrame(hou.playbar.playbackRange()[0])

        hou.hipFile.save(newhip)
        
        # reset update mode and frame
        hou.setUpdateMode(updateMode)
        hou.setFrame(frame)

hipIncrementVersion()]]></script>
    <keywordList>
      <keyword>aelib</keyword>
    </keywordList>
  </tool>
</shelfDocument>
